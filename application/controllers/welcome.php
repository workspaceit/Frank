<?php/** * Description of welcome * * @property CI_DB_active_reocrd       $db * * @property m_user_login              $m_user_login * @property m_gossip_main             $m_gossip_main * @property m_trait_categories        $m_trait_categories * @property m_trait_users             $m_trait_users * @property m_user_basic_info         $m_user_basic_info * @property m_user_profile_data       $m_user_profile_data * @property m_user_trait_final_values $m_user_trait_final_values * @property m_graph_frequency_day     $m_graph_frequency_day * @property m_graph_frequency_year    $m_graph_frequency_year * */class welcome extends CI_Controller {    private $pageData;    private $siteUrl;    private $u_id;    private $gender;    private $sign_in;    private $sign_up;    private $sign_out;    private $search;    private $home;    function __construct() {        parent::__construct();        $this->load->helper('url');        $this->load->helper('date_manipulation_helper');        $this->pageData = array();        include_once(APPPATH . 'controllers/common_site_setting.php');        include_once(APPPATH . 'controllers/class_file/site_url.php');        include_once(APPPATH . 'controllers/class_file/initailize_header_operation.php');        include_once(APPPATH . 'controllers/class_file/encrypt_tbl_primary_key.php');        if ($this->session->userdata('user_login_session') != NULL) {            redirect(base_url() . 'my_profile');        }        $this->sign_in = TRUE;        $this->sign_up = TRUE;        $this->sign_out = FALSE;        $this->search = TRUE;        $this->home = FALSE;    }    function index() {        include_once(APPPATH . 'controllers/class_file/top_container_inf.php');        include_once(APPPATH . 'controllers/class_file/Profile/C_Aggrigates.php');        $this->load->model('m_trait_categories');        $this->load->model('m_trait_users');        $this->load->model('m_search');        $this->load->model('m_user_basic_info');        $this->load->model('m_user_profile_data');        $this->load->model('m_graph_frequency_day');        $this->load->model('m_graph_frequency_month');        $this->load->model('m_graph_frequency_year');        if (isset($_REQUEST['url'])) {            $this->pageData['after_login_redirect_url'] = urldecode($_REQUEST['url']);        } else {            $this->pageData['after_login_redirect_url'] = base_url();        }        $c_aggrigates = new C_Aggrigates();        $this->pageData['c_aggrigates'] = $c_aggrigates;        $encryptObj = new encrypt_tbl_primary_key();        $this->pageData['category_tree'] = $this->m_trait_categories->get_subcategories_in_categories_tree();        $this->pageData['total_user'] = $this->m_user_login->get_row_size();        $this->pageData['total_gossip'] = $this->m_gossip_main->get_total_gossip_count();        $this->pageData['total_online'] = 0;/* future development */        if ($this->m_graph_frequency_day->is_empty()) {            $category_id_array = $this->m_trait_categories->get_default_id();            $this->insert_to_grap_frequency_day($category_id_array, $this->pageData['total_user']);        } elseif ($this->m_graph_frequency_day->is_empty(date('Y-m-d'))) {            $category_id_array = $this->m_trait_categories->get_default_id();            $this->insert_to_grap_frequency_day($category_id_array, $this->pageData['total_user']);        }        $this->pageData['trait_info'] = $this->m_trait_categories->get_all();        $latest_user_id = $this->m_user_login->get_last_user_id();        $userList =  $this->m_user_login->getAllUserId();        $this->pageData['latestuser_login_info'] = $this->m_user_login->get_all_by_uid($latest_user_id);        $this->pageData['latestuser_basic_info'] = $this->m_user_basic_info->get_all_by_u_id($latest_user_id);        $this->pageData['latest_user_location'] = $this->m_user_profile_data->get_all_by_u_id($latest_user_id);        $this->pageData['latest_user_traits'] = $this->m_trait_users->get_user_highest_trait_by_userid($latest_user_id);        $this->pageData['latest_user_rank'] = $this->m_user_trait_final_values->get_value_by_userid($latest_user_id);        $this->pageData['top2_ranked_user'] = $this->m_user_trait_final_values->get_top2_rank_userinfo();        $this->pageData['top3_popular_user'] = $this->m_user_trait_final_values->get_top3_populer_userinfo();        $this->pageData['spotLightUser'] = $this->m_search->get_spotlight_user_by_userlist($userList);        $this->pageData['total_status'] = $this->m_user_trait_final_values->get_total_trait_final_values();        $this->pageData['total_trait_avg'] = $this->m_trait_categories->get_alluser_traitcategory_avg();        $this->pageData['encryptObj'] = $encryptObj;        $this->load->view('index', $this->pageData);    }    private function insert_to_grap_frequency_day($category_id_array, $total_user) {        if ($this->m_graph_frequency_day->is_empty(date("Y-m-d"))) {            foreach ($category_id_array as $rowData) {                $graph_frequency_day = $this->m_trait_users->get_population_of_sub_category_avg_point_in_array_string($rowData->id, $total_user);                $insertData = array(                    'percentage'  => $graph_frequency_day['percentage'],                    'frequency'   => $graph_frequency_day['frequency'],                    'avg'         => $graph_frequency_day['avg'],                    'category_id' => $rowData->id,                    'date'        => date("Y-m-d H:i:s")                );                if ($this->m_graph_frequency_day->insert_row_data($insertData)) {                }            }            $this->change_rows_to_graph_frequency_month($category_id_array);        }    }    private function change_rows_to_graph_frequency_month($category_id_array) {        if ($this->m_graph_frequency_month->is_empty(date("m"), date("Y"))) {            $this->insert_to_graph_frequency_month($category_id_array);        } else {            $date = date("Y-m-d");            $this->insert_to_graph_frequency_month($category_id_array, $date);        }        $this->change_graph_frequency_year($category_id_array);    }    private function insert_to_graph_frequency_month($category_id_array, $date = "") {        $s_day = $this->m_graph_frequency_day->get_min_day();        $f_day = $this->m_graph_frequency_day->get_max_day();        $year = date("Y");        $month_frequency_array = "";        foreach ($category_id_array as $rowData) {            $month_frequency_array = "";            for ($i = 1; $i < $s_day; $i++) {                $month_frequency_array .= "0,";            }            $month_frequency_array = $this->m_graph_frequency_day->get_avg_by_category_id($rowData->id, $s_day, $f_day, $year);            for ($i = $f_day + 1; $i <= 30; $i++) {                $month_frequency_array .= "0,";            }            $insertData = array(                'x_axis'      => 0,                'percentage'  => 0,                'frequency'   => $month_frequency_array,                'avg'         => 0,                'category_id' => $rowData->id,                'date'        => date("Y-m-d H:i:s")            );            if ($date != "") {                $update_data_array = array(                    'frequency' => $month_frequency_array,                    'avg'       => 0                );                $this->m_graph_frequency_month->update_row_data($update_data_array, $rowData->id);            } else {                $this->m_graph_frequency_month->insert_row_data($insertData);            }        }    }    private function change_graph_frequency_year($category_id_array) {        if ($this->m_graph_frequency_year->is_empty(date('Y'))) {            $this->insert_to_graph_frequency_year($category_id_array);        } else {            $this->insert_to_graph_frequency_year($category_id_array, TRUE);        }    }    private function insert_to_graph_frequency_year($category_id_array, $update = FALSE) {        foreach ($category_id_array as $rowData) {            $month_data_array = "";            $past_date = get_past_date(new DateTime(), -11);            $past_date->format('Y-m-d');            $end_month = intval($past_date->format('m'));            $end_year = intval($past_date->format('Y'));            $db_end_month = $this->m_graph_frequency_month->get_min_month($end_year);            $db_min_date = $this->m_graph_frequency_month->get_min_date($end_year);            $db_max_month = $this->m_graph_frequency_month->get_max_month(date('Y'));            $temp_array = '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,';            if ($db_end_month == 0 || $end_month < $db_end_month) {                $diff_date = get_date_difference($past_date->format('Y-m-d'), $db_min_date);                $count = (int)$diff_date->m;                for ($i = 1; $i <= $count; $i++) {                    $month_data_array .= $temp_array;                }            }            foreach ($this->m_graph_frequency_month->get_past_month_data($rowData->id, 12) as $frequency_month_rowData) {                $month_data_array .= $frequency_month_rowData->frequency;            }            if ($update) {                $update_data_array = array(                    'frequency' => $month_data_array,                    'avg'       => 0,                );                $this->m_graph_frequency_year->update_row_data($update_data_array, $rowData->id);            } else {                $insert_data_array = array(                    'x_axis'      => 0,                    'percentage'  => 0,                    'frequency'   => $month_data_array,                    'avg'         => 0,                    'category_id' => $rowData->id,                    'date'        => date("Y-m-d H:i:s")                );                $this->m_graph_frequency_year->insert_row_data($insert_data_array);            }        }    }    function get_main_content() {        $this->load->view('index', $this->pageData);    }    function get_trait_user_list() {        $this->load->model('m_trait_users');        $offset = intval(trim($this->input->post('offset')));        $encryptObj = new encrypt_tbl_primary_key();        $traidId = $this->input->post('traits_id');        $trait_id = $encryptObj->get_plain_text($traidId);        $encryptObj = new encrypt_tbl_primary_key();        $order = $this->input->post('order');        $orderBy = ($order==1) ?'DESC':'ASC';        //For Rank        if($trait_id==-1){            $orderBy =($order==1) ?'ASC':'DESC';        }        $contentData = array();        //Bangla code;        $this->m_trait_users->limit = ($offset==0)?10:$offset*10;        $this->m_trait_users->offset = 0;        $this->pageData['userList'] = $this->m_trait_users->get_top_ten_trait_user($trait_id, $orderBy);        //$replyData['c_aggrigates'] = $c_aggrigates;        $startNumber =  ($this->m_trait_users->offset==0)?1:$this->m_trait_users->offset+1;        $trait_id_data= $trait_id;        if (!empty($this->pageData['userList'])) {            $contentData['reply'] = 1;            $this->pageData['startNumber'] = intval($startNumber);            $this->pageData['trait_id']=$trait_id_data;            $this->pageData['encryptObj'] = $encryptObj;            $contentData['viewData'] = $this->load->view('welcome/welcome_trait_user_list',  $this->pageData, TRUE);        } else {            $contentData['reply'] = 0;        }        echo json_encode($contentData);    }    public function get_graphday_datalist() {        $this->load->model('m_graph_frequency_day');        $encryptObj = new encrypt_tbl_primary_key();        $contentData = array();        $traidId = $this->input->post('traits_id');        $trait_id = $encryptObj->get_plain_text($traidId);        $graphData = $this->m_graph_frequency_day->get_graph_frequency_day_by_cat_and_date($trait_id, date('Y-m-d'));        if (!empty($graphData)) {            $contentData['reply'] = 1;            $contentData['graphData'] = $graphData;        } else {            $contentData['reply'] = 0;        }        echo json_encode($contentData);    }    public function get_graphyear_datalist() {        $this->load->model('m_graph_frequency_year');        $encryptObj = new encrypt_tbl_primary_key();        $contentData = array();        $traidId = $this->input->post('traits_id');        $trait_id = $encryptObj->get_plain_text($traidId);        $graphData = $this->m_graph_frequency_year->get_graph_frequency_day_by_cat_and_year($trait_id, date('Y'));        if (!empty($graphData)) {            $contentData['reply'] = 1;            $contentData['graphData'] = $graphData;        } else {            $contentData['reply'] = 0;        }        echo json_encode($contentData);    }    function get_user_by_namesearch() {        $this->load->model('m_user_basic_info');        $name = trim($this->input->post('user_name'));        $userInfo = $this->m_user_basic_info->get_userinfo_by_search_name($name);        $replyData = array();        if (!empty($userInfo) && is_array($userInfo)) {            $replyData['userInfo'] = $this->load->view('welcome/welcome_search_user_info', array('userData' => $userInfo), TRUE);            $replyData['reply'] = 1;        } else {            $replyData['reply'] = 0;        }        echo json_encode($replyData);    }    public function get_highest_traituser_by_traitid() {        $this->load->model('m_trait_users');        $encryptObj = new encrypt_tbl_primary_key();        $traidId = $this->input->post('traits_id');        $trait_id = $encryptObj->get_plain_text($traidId);        $contentData = array();        $replyData = $this->m_trait_users->get_highest_traituser_by_traitid($trait_id);        if (!empty($replyData)) {            $contentData['reply'] = 1;            $contentData['viewData'] = $this->load->view('welcome/welcome_highest_traituser', array('highest_trait_user' => $replyData), TRUE);        } else {            $contentData['reply'] = 0;        }        echo json_encode($contentData);    }    public function get_latest_gossip() {        include_once(APPPATH . 'controllers/class_file/c_gossip_main.php');        include_once(APPPATH . 'controllers/class_file/encrypt_tbl_primary_key.php');        $encrypt_tbl_primary_key_obj = new encrypt_tbl_primary_key();        $c_gossip_main_obj = new c_gossip_main();        $this->pageData['encrypt_tbl_primary_key_obj'] = $encrypt_tbl_primary_key_obj;        $gossip_id = $c_gossip_main_obj->get_latest_gossip_id();        $this->pageData += $c_gossip_main_obj->get_gossip_row_view_by_target_id("", FALSE, "", "", $gossip_id);        $respond_array['status'] = "true";        $respond_array['element_id'] = "";        $respond_array['msg'] = "Success";        $respond_array['content'] = $this->load->view("gossip_rows_view", $this->pageData, TRUE);        echo json_encode($respond_array);    }}