<?phpclass m_trait_users extends CI_Model{	public $limit;	public $offset;	function __construct()	{		parent::__construct();		$this->limit=-1;		$this->offset=-1;	}	function insert_row_data($insert_data_array){		return $this->db->insert('trait_users',$insert_data_array);	}	function update_row_data($user_id,$trait_categories_id,$update_data_array){		$this->db->where('user_id',$user_id);		$this->db->where("trait_categories_id",$trait_categories_id);		return $this->db->update('trait_users',$update_data_array);	}	function get_all_by_user_id($user_id){		$this->db->select('*');		$this->db->from('trait_users');		$this->db->where('user_id',$user_id);		$this->db->order_by("category asc");		return $this->db->get()->result();	}	function get_row_count($user_id){			$this->db->select('count(id) c');			$this->db->from('trait_users');			$this->db->where('user_id',$user_id);			$this->db->order_by("category asc");			foreach($this->db->get()->result() as $rowData){				return $rowData->c;			}			return 0;	}	function get_all_by_user_id_and_trait_categories_id($user_id,$trait_categories_id){		$this->db->select('*');		$this->db->from('trait_users');		$this->db->where('user_id',$user_id);                $this->db->where("trait_categories_id",$trait_categories_id);		$this->db->limit(1);		return $this->db->get()->result();	}	function get_sub_category_hidden($user_id,$trait_categories_id){		$this->db->select('sub_category_hidden');		$this->db->from('trait_users');		$this->db->where('user_id',$user_id);		$this->db->where("trait_categories_id",$trait_categories_id);		foreach($this->db->get()->result() as $rowData){			return $rowData->sub_category_hidden;		}		return "";	}	function has_avg_point($user_id,$trait_categories_id){		$this->db->select('*');		$this->db->from('trait_users');		$this->db->where('user_id',$user_id);		$this->db->where("trait_categories_id",$trait_categories_id);		foreach($this->db->get()->result() as $rowData){			return TRUE;		}		return false;	}	function get_top_ten_trait_user($trait_categories_id,$order='DESC'){		$sql = "SELECT DISTINCT * FROM trait_users AS tu				LEFT JOIN user_basic_info AS ubi ON tu.user_id = ubi.u_id				LEFT JOIN user_profile_data AS ufd ON tu.user_id = ufd.u_id				LEFT JOIN trait_categories AS tc ON tu.trait_categories_id = tc.id				LEFT JOIN user_trait_final_values AS utfv ON tu.user_id = utfv.user_id";        if(intval($trait_categories_id)>0){            $sql .= " WHERE tu.trait_categories_id={$trait_categories_id}				GROUP BY tu.user_id ORDER BY tu.sub_category_avg_point {$order}";        }else {            if (intval($trait_categories_id) == -1) {                $sql .= " GROUP BY tu.user_id ORDER BY utfv.rank {$order}";            } elseif (intval($trait_categories_id) == -2) {                $sql .= " GROUP BY tu.user_id ORDER BY utfv.reputation {$order}";            } else {                $sql .= " GROUP BY tu.user_id ORDER BY utfv.popularity {$order}";            }        }		if( $this->offset>=0 && $this->limit>0 ){			$sql.=" LIMIT ".$this->limit." OFFSET ".$this->offset;		}		include_once(APPPATH . 'controllers/class_file/Profile/C_Aggrigates.php');		$c_aggrigates = new C_Aggrigates();		$c_aggrigates->isSmallBar = true;		$queryData = $this->db->query($sql);		$respData = $queryData->result();		foreach($respData as $key=>$row){			$row->aggrigate = $c_aggrigates->getAggrigatesInPercentages($row->user_id);			$respData[$key] = $row;		}		if ($queryData->num_rows() > 0){			return $respData;		} else {			return false;		}	}		/*	 * @author : zahed	 * find user's highest trait	 * 	 */	function get_user_highest_trait_by_userid($user_id){		$sql = "SELECT * FROM trait_users				WHERE user_id = {$user_id}				ORDER BY sub_category_avg_point DESC				LIMIT 1";				$queryData = $this->db->query($sql);		if ($queryData->num_rows() > 0){			return $queryData->result();		} else {			return false;		}	}		/*	 * get highest trait user	 */	function get_highest_trait_user_info() {		$sql = "SELECT * FROM trait_users AS tu				LEFT JOIN user_basic_info AS ubi ON tu.user_id = ubi.u_id				LEFT JOIN user_profile_data AS upd ON tu.user_id = upd.u_id				LEFT JOIN user_trait_final_values AS utfv ON tu.user_id = utfv.user_id				ORDER BY sub_category_avg_point DESC				LIMIT 1";		$queryData = $this->db->query($sql);		if ($queryData->num_rows() > 0){			return $queryData->result();		} else {			return false;		}	}		function get_highest_traituser_by_traitid($trait_id) {		$sql = "SELECT * FROM trait_users AS tu				LEFT JOIN trait_categories AS tc ON tu.trait_categories_id = tc.id				LEFT JOIN user_basic_info AS ubi ON tu.user_id = ubi.u_id				LEFT JOIN user_profile_data AS upd ON tu.user_id = upd.u_id				LEFT JOIN user_trait_final_values AS utfv ON tu.user_id = utfv.user_id				WHERE tu.trait_categories_id = {$trait_id}				ORDER BY sub_category_avg_point DESC				LIMIT 1";		$queryData = $this->db->query($sql);		if ($queryData->num_rows() > 0){			return $queryData->result();		} else {			return false;		}	}		function get_trait_avgpoint_by_userlist_and_category($categoryName, $userList){		$userlist = implode(',', $userList);		$sql = "SELECT * 				FROM trait_categories AS tc				LEFT JOIN (				    SELECT ROUND(AVG(sub_category_avg_point),0) AS total_trait, COUNT(user_id) AS total_person, trait_categories_id AS tcat_id				    FROM trait_users				    WHERE user_id IN ({$userlist})				    GROUP BY (trait_categories_id)				) AS tuser_avg ON tc.id = tuser_avg.tcat_id				WHERE category = '{$categoryName}'				AND tc.user_type = 1";					$queryData = $this->db->query($sql);				if ($queryData->num_rows() > 0){			return $queryData->result();		} else {			return false;		}	}		function get_trait_avgpoint_by_category($categoryName){				$sql = "SELECT * 				FROM trait_categories AS tc				LEFT JOIN (				    SELECT ROUND(AVG(sub_category_avg_point),0) AS total_trait, COUNT(user_id) AS total_person, trait_categories_id AS tcat_id				    FROM trait_users				    GROUP BY (trait_categories_id)				) AS tuser_avg ON tc.id = tuser_avg.tcat_id				WHERE category = '{$categoryName}'				AND tc.user_type = 1";				$queryData = $this->db->query($sql);				if ($queryData->num_rows() > 0){			return $queryData->result();		} else {			return false;		}	}         /*         * Return value String with seperator ',' eg: 1,2,3          */        function get_population_of_sub_category_avg_point_in_array_string($trait_categories_id,$total_population){            $point=-100;            $frequency_str_array="";            $percentage_str_array="";            $return_str_array=array();            while($point<=100){                $this->db->select('count(id) c');                $this->db->from('trait_users');                $this->db->where('trait_categories_id',$trait_categories_id);                $this->db->where('floor(sub_category_avg_point)',$point);                foreach( $this->db->get()->result() as $rowData){                    $frequency_str_array.=$rowData->c.',';                    $percentage_str_array.=round(($rowData->c*100)/$total_population,3).',';                }                                                  $point++;                           }            $return_str_array['avg']=0;                        $this->db->select('avg(sub_category_avg_point) avg_point');            $this->db->from('trait_users');            $this->db->where('trait_categories_id',$trait_categories_id);            foreach( $this->db->get()->result() as $rowData){                $return_str_array['avg']=$rowData->avg_point;            }            $return_str_array['frequency']=$frequency_str_array;            $return_str_array['percentage']=$percentage_str_array;            return $return_str_array;        }		function get_trait_details($user_id,$trait_categories)		{			$sql = "SELECT							trait_users.id AS trait_users_id,							trait_users.category AS t_cat,							trait_users.sub_category_value AS trait_name,							trait_users.sub_category_hidden AS f_point,							trait_users.sub_category_avg_point AS r_point,							trait_categories.color_class AS color_class							FROM `trait_users`							join trait_categories on trait_categories.id = trait_users.trait_categories_id ";			$sql .= " where trait_categories.id = ".$trait_categories;			$sql .= " AND ";			$sql .= " trait_users.user_id = ".$user_id." limit 1";			foreach($this->db->query($sql)->result() as $rowData){				return $rowData;			}			return array();		}}?>