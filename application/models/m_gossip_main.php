<?phpclass m_gossip_main extends CI_Model {    public $offset;    public $limit;    function __construct(){        parent::__construct();        $this->offset = -1;        $this->limit = -1;    }    function getAllByGossipperId($uid){        $sql = "select *  from gossip_main where gossipper_id = ".$uid;       return $this->db->query($sql)->result();    }    function getAllByTargetId($uid){        $sql = "select *  from gossip_main where target_id = ".$uid;        return $this->db->query($sql)->result();    }    function getGossipper_idByTargetId($gossipId){        $sql = "select gossipper_id  from gossip_main where id = ".$gossipId;         foreach($this->db->query($sql)->result() as $rowData){             return $rowData->gossipper_id;         }        return 0;    }    function deleteByGossipper_id($uid){        $sql = "delete from gossip_main where gossipper_id = ".$uid;        return $this->db->query($sql);    }    function deleteByTarget_id($uid){        $sql = "delete from gossip_main where target_id = ".$uid;        return $this->db->query($sql);    }    function insert_row_data($insert_data_array) {        return $this->db->insert('gossip_main', $insert_data_array);    }    function update_row_data($update_data_array, $id) {        $this->db->where('id', $id);        return $this->db->update('gossip_main', $update_data_array);    }    function get_todays_gossip_count() {        $sql = "select count(id) c from gossip_main where created_date = '" . date('Y-m-d') . "'";        foreach ($this->db->query($sql)->result() as $rowData) {            return $rowData->c;        }        return 0;    }    function get_thread_and_comments_by_id($id) {        $sql = "select                        gossip_main.thread_value as gossip_thread_value,                        gossip_main_comments.comments as gossip_comments                   from                        gossip_main                        left join gossip_main_comments on gossip_main.id = gossip_main_comments.gossip_id                   where                         gossip_main.id = " . $id . "                        ";        return $this->db->query($sql)->result();    }    function get_gossipper_id_by_id($id) {        $this->db->select('gossipper_id');        $this->db->from('gossip_main');        $this->db->where('id', $id);        $this->db->limit(1);        foreach ($this->db->get()->result() as $rowData) {            return $rowData->gossipper_id;        }        return "";    }    function get_target_id_by_id($id) {        $this->db->select('target_id');        $this->db->from('gossip_main');        $this->db->where('id', $id);        $this->db->limit(1);        foreach ($this->db->get()->result() as $rowData) {            return $rowData->target_id;        }        return "";    }    function get_max_trait_category_id_by_target_id($target_id) {        $sql = "select				trait_categories_id				from				trait_v_a_value				where				gossip_id = (				select				max(id)				from				gossip_main				where				target_id = " . intval($target_id) . "						)						";        foreach ($this->db->query($sql)->result() as $rowData) {            return $rowData->trait_categories_id;        }        return "";    }    function get_max_trait_category_id_by_gossiper_id($gossiper_id) {        $sql = "select				trait_categories_id				from				trait_v_a_value				where				gossip_id = (				select				max(id)				from				gossip_main				where				gossipper_id = " . intval($gossiper_id) . "						)						";        foreach ($this->db->query($sql)->result() as $rowData) {            return $rowData->trait_categories_id;        }        return "";    }    function get_last_id_by_category_id() {        $this->db->select('id');        $this->db->from('gossip_main');        $this->db->order_by("id desc");        foreach ($this->db->get()->result() as $rowData) {            return $rowData->id;        }        return "";    }    function get_id_by_gossiper_id_target_id_thread_value(        $gossiper_id,        $target_id,        $thread_value    ) {        $this->db->select('id');        $this->db->from('gossip_main');        $this->db->where('gossipper_id', $gossiper_id);        $this->db->where('target_id', $target_id);        $this->db->where('thread_value', $thread_value);        foreach ($this->db->get()->result() as $rowData) {            return $rowData->id;        }        return "";    }    function is_gossip_exist_by_gossiper_id_target_id_thread_value(        $gossiper_id,        $target_id,        $thread_value    ) {        $this->db->select('id');        $this->db->from('gossip_main');        $this->db->where('gossipper_id', $gossiper_id);        $this->db->where('target_id', $target_id);        $this->db->where('thread_value', $thread_value);        foreach ($this->db->get()->result() as $rowData) {            return TRUE;        }        return FALSE;    }    function is_gossip_received_by_target($target_id) {        $this->db->select('id');        $this->db->from('gossip_main');        $this->db->where('target_id', $target_id);        foreach ($this->db->get()->result() as $rowData) {            return TRUE;        }        return FALSE;    }    function update_gossip_comment_id($update_data_array, $gossip_comment_id) {        $this->db->where('gossip_comment_id', $gossip_comment_id);        return $this->db->update('gossip_main', $update_data_array);    }    function get_total_gossip_count_by_target_id($target_id) {        $this->db->select('COUNT(id) as row_count');        $this->db->from('gossip_main');        $this->db->where('target_id', $target_id);        foreach ($this->db->get()->result() as $rowData) {            return intval($rowData->row_count);        }        return 0;    }    // From Class m_trait_users [Required to avoid Unkown Error in class c_gossip_main->get_gossip_row_view_by_target_id]    function get_all_by_user_id_and_trait_categories_id($user_id, $trait_categories_id) {        $sql = "select                        trait_users.sub_category_avg_point,                        trait_users.sub_category_value,                        trait_users.sub_category_hidden,                        trait_users.category,                        trait_categories.color_class                     from                         trait_users                     left join   trait_categories on trait_categories.id = trait_users.trait_categories_id                     where                        trait_users.user_id = " . $user_id . "                            and                        trait_users.trait_categories_id = 1                     limit 1                        ";        return $this->db->query($sql)->result();    }    // From Class m_trait_v_a_value [Required to avoid Unkown Error in class c_gossip_main->get_gossip_row_view_by_target_id]    function get_r_point_by_rated_by_and_gossip_id($gossip_id, $rated_by) {        $this->db->select("r_point");        $this->db->from("trait_v_a_value");        $this->db->where("gossip_id", $gossip_id);        $this->db->where("rated_by", $rated_by);        foreach ($this->db->get()->result() as $rowData) {            return intval($rowData->r_point);        }        return 0;    }    function get_f_point_by_rated_by_and_gossip_id($gossip_id, $rated_by) {        $this->db->select("f_point");        $this->db->from("trait_v_a_value");        $this->db->where("gossip_id", $gossip_id);        $this->db->where("rated_by", $rated_by);        foreach ($this->db->get()->result() as $rowData) {            return intval($rowData->f_point);        }        return 0;    }    // From Class m_trait_categories [Required to avoid Unkown Error in class c_gossip_main->get_gossip_row_view_by_target_id]    function get_sub_category_by_id($id) {        $this->db->select('sub_category');        $this->db->from('trait_categories');        $this->db->where('id', $id);        $this->db->limit(1);        foreach ($this->db->get()->result() as $rowData) {            return $rowData->sub_category;        }        return "";    }    // From Class m_gossip_comments [Required to avoid Unkown Error in class c_gossip_main->get_gossip_row_view_by_target_id]    function get_row_count_by_gossip_id($gossip_id) {        $this->db->select('count(id) r_count');        $this->db->from('gossip_comments');        $this->db->where('gossip_id', $gossip_id);        foreach ($this->db->get()->result() as $rowDat) {            return $rowDat->r_count;        }        return 0;    }    // From Class m_user_basic_info [Required to avoid Unkown Error in class c_gossip_main->get_gossip_row_view_by_target_id]    function get_id_by_u_id($person_name) {        $sql = " select				u_id				from				user_basic_info				where				(				user_basic_info.f_name like '%." . $person_name . "%' or						user_basic_info.l_name like '%." . $person_name . "%' or								CONCAT(user_basic_info.f_name,' ',user_basic_info.l_name) like '%" . $person_name . "%' or										CONCAT(user_basic_info.l_name,' ',user_basic_info.f_name) like '%" . $person_name . "%'												)												";        return $this->db->query($sql)->result();    }    //Gossip Row Only first Two Coloumn    function get_j_gossip_row($target_id, $trait_category_id = "", $person_id_array = array(), $from = FALSE, $order) {        $sql = "select				gossip_main.id as gossip_id,				gossip_main.gossipper_id as gossipper_id,                                gossip_main.target_id as target_id,                                gossip_main.gossip_hidden as gossip_hidden,                                gossip_main.created_date as gossip_date,                                user_trait_final_values.rank as gossiper_rank,                                user_trait_final_values.reputation as gossiper_reputation,                                user_trait_final_values.popularity as gossiper_popularity,                gossip_insiders.values as gossip_insiders_values,				g_user_login.u_email as gossiper_email,				t_user_login.u_email as target_email,				gossip_main.thread_value as gossip_thread_value,				gossip_main_comments.id as gossip_comments_id,				gossip_main_comments.comments as gossip_comments,				gossip_main_comments.avg_like as gossip_like,				user_basic_info.pic_path as gossiper_profile_picture,				u_basic_inf.pic_path as target_profile_picture,				concat(user_basic_info.f_name,' ',user_basic_info.l_name) as  gossiper_name,				user_basic_info.birthday as gossiper_birthday,				user_profile_data.current_location_1 as gossiper_location				from				gossip_main				left join gossip_main_comments on gossip_main.id = gossip_main_comments.gossip_id				left join user_basic_info on gossip_main.gossipper_id = user_basic_info.u_id				left join user_basic_info u_basic_inf on gossip_main.target_id = u_basic_inf.u_id				left join user_login g_user_login on gossip_main.gossipper_id =  g_user_login.id				left join user_login t_user_login on gossip_main.target_id =  t_user_login.id                left join user_trait_final_values on user_trait_final_values.user_id = g_user_login.id				left join user_profile_data on  gossip_main.gossipper_id = user_profile_data.u_id                left join gossip_insiders on  gossip_main.id = gossip_insiders.gossip_id ";        if ($trait_category_id != ""  && intval($trait_category_id)>0) {            $sql .= " left join  gossip_main_trait on  gossip_main.id = gossip_main_trait.gossip_id";            $sql .= " left join  trait_v_a_value on  gossip_main.id = trait_v_a_value.gossip_id AND gossip_main_trait.trait_categories_id=trait_v_a_value.trait_categories_id";        }        $sql .= "  where ";        if ($from) {            $sql .= " gossip_main.gossipper_id = " . intval($target_id) . "  ";            $search_user_type = "target_id";        } else {            $sql .= " gossip_main.target_id = " . intval($target_id) . "  ";            $search_user_type = "gossipper_id";        }        if ($trait_category_id != "" && intval($trait_category_id)>0) {            $sql .= " and ";            $sql .= " gossip_main_trait.trait_categories_id = " . intval($trait_category_id) . "  ";        }        $i = 0;        foreach ($person_id_array as $person_id) {            if ($i == 0) {                $sql .= " and						(gossip_main." . $search_user_type . " = " . intval($person_id->u_id) . " ";            } else {                $sql .= " or						gossip_main." . $search_user_type . " = " . intval($person_id->u_id) . " ";            }            $i++;        }        if (sizeof($person_id_array) > 0) {            $sql .= " ) ";        }        if ($order == 1) {            $sql .= " order by gossip_main.id desc ";        } else if($order == 0){            $sql .= " order by gossip_main.id asc ";        }        else if($order == 2){            if ($trait_category_id == ""){                $sql .= " order by gossip_main.id asc ";            }            else{                if (intval($trait_category_id) > 0) {                    $sql .= " order by trait_v_a_value.r_point asc ";                }                if (intval($trait_category_id) == -1) {                    $sql .= " order by user_trait_final_values.rank asc ";                }                if (intval($trait_category_id) == -2){                    $sql .= " order by user_trait_final_values.reputation asc ";                }                if (intval($trait_category_id) == -3) {                    $sql .= " order by user_trait_final_values.popularity asc ";                }            }        }        else if($order == 3){            if ($trait_category_id == ""){                $sql .= " order by gossip_main.id desc ";            }            else{                if (intval($trait_category_id) > 0) {                    $sql .= " order by trait_v_a_value.r_point desc ";                }                if (intval($trait_category_id) == -1) {                    $sql .= " order by user_trait_final_values.rank desc ";                }                if (intval($trait_category_id) == -2) {                    $sql .= " order by user_trait_final_values.reputation desc ";                }                if (intval($trait_category_id) == -3) {                    $sql .= " order by user_trait_final_values.popularity desc ";                }            }        }        if( $this->offset>=0 && $this->limit>=0 ){            $sql.=" LIMIT ".$this->limit." OFFSET ".$this->offset;        }        return $this->db->query($sql)->result();    }    function get_j_gossip_row_by_gossip_id($gossip_id) {        $sql = "select				gossip_main.id as gossip_id,				gossip_main.gossipper_id as gossipper_id,                                gossip_main.target_id as target_id,                                gossip_main.gossip_hidden as gossip_hidden,                                gossip_main.created_date as gossip_date,                                user_trait_final_values.rank as gossiper_rank,                                				g_user_login.u_email as gossiper_email,				t_user_login.u_email as target_email,				gossip_main.thread_value as gossip_thread_value,				gossip_main_comments.id as gossip_comments_id,				gossip_main_comments.comments as gossip_comments,				gossip_main_comments.avg_like as gossip_like,				user_basic_info.pic_path as gossiper_profile_picture,				u_basic_inf.pic_path as target_profile_picture,				concat(user_basic_info.f_name,' ',user_basic_info.l_name) as  gossiper_name,				user_basic_info.birthday as gossiper_birthday,				user_profile_data.current_location_1 as gossiper_location                        from				gossip_main				left join gossip_main_comments on gossip_main.id = gossip_main_comments.gossip_id				left join user_basic_info on gossip_main.gossipper_id = user_basic_info.u_id				left join user_basic_info u_basic_inf on gossip_main.target_id = u_basic_inf.u_id				 				left join user_login g_user_login on gossip_main.gossipper_id =  g_user_login.id				left join user_login t_user_login on gossip_main.target_id =  t_user_login.id                                                                left join user_trait_final_values on user_trait_final_values.user_id = g_user_login.id				left join user_profile_data on  gossip_main.gossipper_id = user_profile_data.u_id                         where                                  gossip_main.id = " . $gossip_id . "                        ";        return $this->db->query($sql)->result();    }    function get_j_gossip_reply_person_inf($gossipper_id, $target_id) {        $sql = "select				concat(user_basic_info.f_name,' ',user_basic_info.l_name) gossiper_name,				user_basic_info.pic_path gossiper_profile_pic,				 				concat(u_basic_inf.f_name,' ',u_basic_inf.l_name) target_name,				u_basic_inf.pic_path target_profile_pic				from				user_basic_info,				user_basic_info u_basic_inf				where				/* Join Here If Required */				user_basic_info.u_id = " . intval($gossipper_id) . " and						u_basic_inf.u_id = " . intval($target_id) . "								limit 1								";        return $this->db->query($sql)->result();    }    function get_j_gossip_person_box_data($target_id) {        $sql = "select				distinct trait_v_a_value.trait_categories_id as gossip_trait_categories_id,				gossip_main.id as gossip_id,				trait_users.trait_categories_id as trait_users_trait_categories_id,				trait_users.category as trait_users_category,				trait_users.sub_category_value as trait_users_sub_category_value,				trait_users.sub_category_hidden as trait_users_sub_category_hidden,				trait_users.sub_category_avg_point as avg_point,				trait_users.created_date as  trait_users_created_date				from				trait_v_a_value,				gossip_main,				trait_users				 				where				gossip_main.target_id = " . intval($target_id) . " and                                    trait_v_a_value.gossip_id = gossip_main.id and                                    trait_v_a_value.trait_categories_id =trait_users.trait_categories_id						";        return $this->db->query($sql)->result();    }    function get_j_gossip_trait_inf_by_gossip_id($gossip_id, $trait_categories_id = "") {//Not Used Anymore        $sql = "select				trait_users_gossip_g.trait_categories_id as gossiper_trait_categories_id,				trait_users_gossip_g.category as gossiper_trait_category,				trait_users_gossip_g.sub_category_value as gossiper_trait_sub_category_value,				trait_users_gossip_g.sub_category_hidden as gossiper_trait_sub_category_hidden,				trait_users_gossip_g.sub_category_avg_point as gossiper_avg_point,				trait_users_gossip_g.created_date as  gossiper_trait_created_date				 				from				gossip_main				left join trait_users_gossip trait_users_gossip_g on gossip_main.gossipper_id  = trait_users_gossip_g.user_id				where				gossip_main.id = " . $gossip_id . "						 						";        if ($trait_categories_id != "") {            $sql .= " and trait_users_gossip_g.trait_categories_id = " . $trait_categories_id;            $sql .= " and trait_users_gossip_t.trait_categories_id = " . $trait_categories_id;        }        return $this->db->query($sql)->result();    }    function get_j_gossip_target_trait_inf_by_gossip_id($gossip_id, $trait_categories_id = "") {        $sql = "select				trait_users_gossip_t.trait_categories_id as target_trait_categories_id,				trait_users_gossip_t.user_id target_id,				trait_users_gossip_t.category as target_trait_category,				trait_users_gossip_t.sub_category_value as target_trait_sub_category_value,				trait_users_gossip_t.sub_category_hidden as target_trait_sub_category_hidden,				ROUND(avg(trait_users_gossip_t.sub_category_avg_point),0) as target_avg_point,				trait_users_gossip_t.created_date as  target_trait_created_date				from				gossip_main				inner join trait_users_gossip trait_users_gossip_t on  gossip_main.id = trait_users_gossip_t.gossip_id				where				trait_users_gossip_t.user_id = gossip_main.target_id				and				gossip_main.id = " . $gossip_id . "";        if ($trait_categories_id != "" && intval($trait_categories_id)>0) {            $sql .= " and trait_users_gossip_t.trait_categories_id = " . $trait_categories_id;        }        $sql .= " order by trait_users_gossip_t.trait_categories_id asc ";        return $this->db->query($sql)->result();    }    function get_gossip_target_trait_point($gossip_id, $trait_categories_id, $main_comment, $target_id) {        $this->db->select("r_point");        $this->db->from("trait_v_a_value");        $this->db->where("gossip_id", $gossip_id);        $this->db->where("trait_categories_id", $trait_categories_id);        $this->db->where("main_comment", $main_comment);        $this->db->where("rated_to", $target_id);        foreach ($this->db->get()->result() as $rowData) {            return $rowData->r_point;        }        return 0;    }    function get_total_gossip_count_by_gossipper_id($gossipper_id) {        $this->db->select('COUNT(id) as row_count');        $this->db->from('gossip_main');        $this->db->where('gossipper_id', $gossipper_id);        foreach ($this->db->get()->result() as $rowData) {            return intval($rowData->row_count);        }        return 0;    }    function is_gossip_target_by_id_target_id($id, $target_id) {        $this->db->select('id');        $this->db->from('gossip_main');        $this->db->where('target_id', $target_id);        $this->db->where('id', $id);        $this->db->limit(1);        foreach ($this->db->get()->result() as $rowData) {            return TRUE;        }        return FALSE;    }    function is_gossiper($id, $user_id) {        $this->db->select('id');        $this->db->from('gossip_main');        $this->db->where('gossipper_id', $user_id);        $this->db->where('id', $id);        $this->db->limit(1);        foreach ($this->db->get()->result() as $rowData) {            return TRUE;        }        return FALSE;    }    function get_total_gossip_count() {        $this->db->select('COUNT(*) c');        $this->db->from('gossip_main');        foreach ($this->db->get()->result() as $rowData) {            return intval($rowData->c);        }        return 0;    }    function get_total_gossipfor_by_userlist($userList) {        $userlist = implode(',', $userList);        $sql = "SELECT COUNT(*) AS c				FROM `gossip_main`				WHERE target_id IN ({$userlist})";        $data = $this->db->query($sql);        if ($data->num_rows() > 0) {            foreach ($data->result() as $rowData) {                return intval($rowData->c);            }        } else {            return FALSE;        }    }    function get_total_gossipfrom_by_userlist($userList) {        $userlist = implode(',', $userList);        $sql = "SELECT COUNT(*) AS c				FROM `gossip_main`				WHERE gossipper_id IN ({$userlist})";        $data = $this->db->query($sql);        if ($data->num_rows() > 0) {            foreach ($data->result() as $rowData) {                return intval($rowData->c);            }        } else {            return FALSE;        }    }    function get_total_gossips_by_userlist($userList) {        $userlist = implode(',', $userList);        $sql = "SELECT *				FROM `gossip_main` 				WHERE target_id IN ({$userlist})				    UNION				SELECT *				FROM `gossip_main` 				WHERE gossipper_id IN ({$userlist})";        $data = $this->db->query($sql);        if ($data->num_rows() > 0) {            return $data->num_rows();        } else {            return FALSE;        }    }    function get_group_latest_gossip_id($user_list) {        $sql = "SELECT id                  FROM                       `gossip_main`                   WHERE                        `target_id` in {$user_list} or `gossipper_id` in {$user_list}                         order by id limit 1 ";        foreach ($this->db->query($sql)->result() as $rowData) {            return $rowData->id;        }        return "";    }}//         trait_categories_id as trait_users_trait_categories_id,//         trait_users_gossip_g.category as trait_users_category,//         trait_users_gossip_g.sub_category_value as trait_users_sub_category_value,//         trait_users_gossip_g.sub_category_hidden as trait_users_sub_category_hidden,//         trait_users_gossip_g.sub_category_avg_point as avg_point,//     trait_users_gossip_g.created_date as  trait_users_created_date//    left join trait_users_gossip trait_users_gossip_g on gossip_main.id = trait_users_gossip_g.gossip_id//     $sql.=" gossip_main.gossipper_id = trait_users_gossip_g.user_id ";//     $sql.=" trait_users_gossip.gossip_id = gossip_main.id ";//     $sql.=" trait_users_gossip.trait_categories_id = ".intval($trait_category_id);?>